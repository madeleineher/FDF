draw line(entier x1, entier y1, entier x2, entier y2) est
  déclarer entier dx, dy;
  
  if (dx ← x2 - x1) ≠ 0 alors
    if dx > 0 alors
      if (dy ← y2 - y1) ≠ 0 alors
        
        if dy > 0 alors          
          if dx ≥ dy alors // 1er octant
            déclarer entier e ;
            dx ← (e ← dx) × 2 ; dy ← dy × 2 ;  // e est positif
            boucle sans fin  // déplacements horizontaux
              tracePixel(x1, y1) ;
              interrompre boucle if (x1 ← x1 + 1) = x2 ;
              if (e ← e - dy) < 0 alors
                y1 ← y1 + 1 ;  // déplacement diagonal
                e ← e + dx ;
        
            fin boucle ;
          else // 2d octant
            déclarer entier e ;
            dy ← (e ← dy) × 2 ; dx ← dx × 2 ;  // e est positif
            boucle sans fin  // déplacements verticaux
              tracePixel(x1, y1) ;
              interrompre boucle if (y1 ← y1 + 1) = y2 ;
              if (e ← e - dx) < 0 alors
                x1 ← x1 + 1 ;  // déplacement diagonal
                e ← e + dy ;
        
            fin boucle ;
    
        else  // dy < 0 (et dx > 0) 4e cadran
          if dx ≥ -dy alors // vecteur diagonal ou oblique proche de l’horizontale, dans le 8e octant
            déclarer entier e ;
            dx ← (e ← dx) × 2 ; dy ← dy × 2 ;  // e est positif
            boucle sans fin  // déplacements horizontaux
              tracePixel(x1, y1) ;
              interrompre boucle if (x1 ← x1 + 1) = x2 ;
              if (e ← e + dy) < 0 alors
                y1 ← y1 - 1 ;  // déplacement diagonal
                e ← e + dx ;
        
            fin boucle ;
          else  //  7e octant
            déclarer entier e ;
            dy ← (e ← dy) × 2 ; dx ← dx × 2 ;  // e est négatif
            boucle sans fin  // déplacements verticaux
              tracePixel(x1, y1) ;
              interrompre boucle if (y1 ← y1 - 1) = y2 ;
              if (e ← e + dx) > 0 alors
                x1 ← x1 + 1 ;  // déplacement diagonal
                e ← e + dy ;
        
            fin boucle ;
    
  
      else  // dy = 0 (et dx > 0) // vecteur horizontal vers la droite
        répéter
          tracePixel(x1, y1) ;
        jusqu’à ce que (x1 ← x1 + 1) = x2;



    else  // dx < 0
      if (dy ← y2 - y1) ≠ 0 alors
        if dy > 0 alors // le 2d quadran
          if -dx ≥ dy alors // vecteur diagonal ou oblique proche de l’horizontale, dans le 4e octant
            déclarer entier e ;
            dx ← (e ← dx) × 2 ; dy ← dy × 2 ;  // e est négatif
            boucle sans fin  // déplacements horizontaux
              tracePixel(x1, y1) ;
              interrompre boucle if (x1 ← x1 - 1) = x2 ;
              if (e ← e + dy) ≥ 0 alors
                y1 ← y1 + 1 ;  // déplacement diagonal
                e ← e + dx ;
        
            fin boucle ;
          else // vecteur oblique proche de la verticale, dans le 3e octant
            déclarer entier e ;
            dy ← (e ← dy) × 2 ; dx ← dx × 2 ;  // e est positif
            boucle sans fin  // déplacements verticaux
              tracePixel(x1, y1) ;
              interrompre boucle if (y1 ← y1 + 1) = y2 ;
              if (e ← e + dx) ≤ 0 alors
                x1 ← x1 - 1 ;  // déplacement diagonal
                e ← e + dy ;
        
            fin boucle ;
    

        else  // dy < 0 (et dx < 0) // vecteur oblique dans le 3e cadran
          if dx ≤ dy alors
            // vecteur diagonal ou oblique proche de l’horizontale, dans le 5e octant
            déclarer entier e ;
            dx ← (e ← dx) × 2 ; dy ← dy × 2 ;  // e est négatif
            boucle sans fin  // déplacements horizontaux
              tracePixel(x1, y1) ;
              interrompre boucle if (x1 ← x1 - 1) = x2 ;
              if (e ← e - dy) ≥ 0 alors
                y1 ← y1 - 1 ;  // déplacement diagonal
                e ← e + dx ;
        
            fin boucle ;
          else  // vecteur oblique proche de la verticale, dans le 6e octant
            déclarer entier e ;
            dy ← (e ← dy) × 2 ; dx ← dx × 2 ;  // e est négatif
            boucle sans fin  // déplacements verticaux
              tracePixel(x1, y1) ;
              interrompre boucle if (y1 ← y1 - 1) = y2 ;
              if (e ← e - dx) ≥ 0 alors
                x1 ← x1 - 1 ;  // déplacement diagonal
                e ← e + dy ;
        
            fin boucle ;
      
  
      else  // dy = 0 (et dx < 0) // vecteur horizontal vers la gauche
        répéter
          tracePixel(x1, y1) ;
        jusqu’à ce que (x1 ← x1 - 1) = x2 ; 



  else  // dx = 0
    if (dy ← y2 - y1) ≠ 0 alors
      if dy > 0 alors  // vecteur vertical croissant
        répéter
          tracePixel(x1, y1) ;
        jusqu’à ce que (y1 ← y1 + 1) = y2 ;
      else  // dy < 0 (et dx = 0) // vecteur vertical décroissant
        répéter
          tracePixel(x1, y1) ;
        jusqu’à ce que (y1 ← y1 - 1) = y2 ; 
 // le pixel final x2, y2) n’est pas tracé.
fin procédure ;





























